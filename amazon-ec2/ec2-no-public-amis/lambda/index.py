"""
Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.
Permission is hereby granted, free of charge, to any person obtaining a copy of this
software and associated documentation files (the "Software"), to deal in the Software
without restriction, including without limitation the rights to use, copy, modify,
merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Security Control: No Public AMIs
Description:  Checks for AMIs being made public, reverts them to private and alerts upon violation.

Runtime: Python 3.6
"""


import os
import boto3
from botocore.exceptions import ClientError
import logging

OUTBOUND_TOPIC_ARN = os.environ["outbound_topic_arn"]


def lambda_handler(event, context):
    """
    Main Function.

    Calls public_ami function to see if CloudWatch event contains
    "all" string in the requestParameters. If so, it will send an
    SNS notification
    """
    setup_logging()
    log.info(event)
    public_ami = check_ami_event(event)
    ami_id = event["detail"]["requestParameters"]["imageId"]

    if public_ami:
        make_ami_private(ami_id)
        subject = "Violation - EC2 AMI is Public"
        message = create_non_compliance_message(ami_id, event, context)
        send_violation(message, subject)


def check_ami_event(event):
    """
    Function will determine if AMI is made public.

    If AMI is encrypted, it will still trigger which is the
    reason for the error code check which will exit the function
    gracefully.
    """
    response = event["detail"]["requestParameters"]["launchPermission"]["add"]["items"]
    if 'errorCode' in event["detail"]:
        if event["detail"]["errorCode"] == "Client.UnsupportedOperation":
            return 0
    else:
        for data in response:
            if data["group"] == "all":
                return 1


def make_ami_private(ami_id):
    """When this function is called, it will make an AMI private if it's made public initially."""
    client = boto3.client('ec2')

    try:
        client.reset_image_attribute(
            Attribute='launchPermission',
            ImageId=ami_id)
    except ClientError as err:
        log.info(err)
        return False


def send_violation(message, subject):
    """Function will publish the AWS SNS notification detailing when a violation has occurred."""
    findsnsregion = OUTBOUND_TOPIC_ARN.split(":")
    snsregion = findsnsregion[3]
    sendclient = boto3.client('sns', region_name=snsregion)
    try:
        sendclient.publish(
            TopicArn=OUTBOUND_TOPIC_ARN,
            Message=message,
            Subject=subject
        )
    except ClientError as err:
        log.info(err)
        return False


def create_non_compliance_message(ami_id, event, context):
    """Function will structure the outgoing AWS SNS notification format."""
    message = "Violation - EC2 AMI was made Public!  \n\n"
    message += f'AMI ID: {ami_id}' + '\n'
    message += 'Account: ' + event["account"] + "\n"
    message += "Region: " + event["detail"]["awsRegion"] + "\n"
    message += "AMI will be automatically reverted to Private. \n"
    message += "\n\n"
    message += "This notification was generated by the Lambda function " + \
        context.invoked_function_arn
    return message


def setup_logging():
    """
    Logging Function.

    Creates a global log object and sets its level.
    """
    global log
    log = logging.getLogger()
    log_levels = {'INFO': 20, 'WARNING': 30, 'ERROR': 40}

    if 'logging_level' in os.environ:
        log_level = os.environ['logging_level'].upper()
        if log_level in log_levels:
            log.setLevel(log_levels[log_level])
        else:
            log.setLevel(log_levels['ERROR'])
            log.error("The logging_level environment variable is not set to INFO, WARNING, or \
                      ERROR.  The log level is set to ERROR")
    else:
        log.setLevel(log_levels['ERROR'])
        log.warning('The logging_level environment variable is not set. The log level is set to \
                    ERROR')
    log.info('Logging setup complete - set to log level ' +
             str(log.getEffectiveLevel()))
